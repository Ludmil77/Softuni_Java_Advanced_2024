import java.util.*;
import java.util.function.BiPredicate;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class _10_Predicate_Party
{
    public static void main(String[] args)
    {
        Scanner scanner = new Scanner(System.in);
        String values = scanner.nextLine();
        List<String> items = Arrays.stream(values.split(" "))
                .collect(Collectors.toList());
        String command = scanner.nextLine();

        while(!command.equals("Party!"))
        {
            String[] comArgs = command.split(" ");
            String first = comArgs[0];
            String second = comArgs[1];
            if(first.equals("Remove"))
            {
                if(second.equals("StartsWith"))
                {
                    String symbol = comArgs[2];
                    items.removeIf(x -> x.startsWith(symbol));
                }
                else if(second.equals("EndsWith"))
                {
                    String symbol = comArgs[2];
                    items.removeIf(x -> x.endsWith(symbol));
                }
                else if(second.equals("Length"))
                {
                    int length = Integer.parseInt(comArgs[2]);
                    items.removeIf(x -> x.length() == length);
                }
            }
            else if(first.equals("Double"))
            {
                if(second.equals("StartsWith"))
                {
                    String symbol = comArgs[2];
                    items = doubleIfStartsWith(items, symbol);
                }
                else if(second.equals("EndsWith"))
                {
                    String symbol = comArgs[2];
                    items = doubleIfEndsWith(items, symbol);
                }
                else if(second.equals("Length"))
                {
                    int length = Integer.parseInt(comArgs[2]);
                    items = doubleIfEqualToGivenLength(items, length);
                }
            }
            command = scanner.nextLine();
        }
        Collections.sort(items);
        printFinalState(items);
    }
    public static List<String> doubleIfStartsWith(List<String> items,  String symbol)
    {
        String[] temp = new String[items.size()];
        temp = new ArrayList<>(items).toArray(new String[0]);
        for(int i = 0 ; i < temp.length; i++)
        {
            if(temp[i].startsWith(symbol))
            {
                items.add(temp[i]);
            }
        }
        return items;
    }
    public static List<String> doubleIfEndsWith(List<String> items,  String symbol)
    {
        String[] temp = new String[items.size()];
        temp = new ArrayList<>(items).toArray(new String[0]);
        for(int i = 0 ; i < temp.length; i++)
        {
            if(temp[i].endsWith(symbol))
            {
                items.add(temp[i]);
            }
        }
        return items;
    }
    public static List<String> doubleIfEqualToGivenLength(List<String> items,  int length)
    {
        String[] temp = new String[items.size()];
        temp = new ArrayList<>(items).toArray(new String[0]);
        for(int i = 0 ; i < temp.length; i++)
        {
            if(temp[i].length() == length)
            {
                items.add(temp[i]);
            }
        }
        return items;
    }
    public static void printFinalState(List<String> items)
    {
        if(items.isEmpty())
        {
            System.out.println("Nobody is going to the party!");
        }
        else
        {
            System.out.println(String.join(", ", items) + " are going to the party!");
        }
    }
}
