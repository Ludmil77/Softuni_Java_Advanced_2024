import java.util.Arrays;
import java.util.Scanner;

public class _05_Maximum_Sum_of_2x2_Submatrix
{
    public static void main(String[] args)
    {
        Scanner scanner = new Scanner(System.in);
        String sizes = scanner.nextLine();
        String[] str = sizes.split(", ");
        int rows = Integer.parseInt(str[0]);
        int cols = Integer.parseInt(str[1]);
        int[][] matrix = new int[rows][];

        for(int i = 0; i < rows; i++)
        {
            int[] arr = Arrays
                    .stream(scanner.nextLine().split(", "))
                    .mapToInt(Integer::parseInt).toArray();;
            matrix[i] = arr;
        }
        findAndPrintMaxSum2x2Submatrix(matrix);
    }
    public static void findAndPrintMaxSum2x2Submatrix(int[][] matrix)
    {
        int[][] cubeMatrix = new int[2][2];
        int maxSum = Integer.MIN_VALUE;

        for(int row = 0; row < matrix.length; row++)
        {
            if(row == matrix.length - 1)
            {
                break;
            }
            for(int col = 0; col < matrix[row].length; col++)
            {
                if(col == matrix[row].length - 1)
                {
                    break;
                }
                int sum = 0;
                sum += matrix[row][col];
                sum += matrix[row][col + 1];
                sum += matrix[row + 1][col];
                sum += matrix[row + 1][col + 1];
                if(sum > maxSum)
                {
                    maxSum = sum;
                    cubeMatrix[0][0] = matrix[row][col];
                    cubeMatrix[0][1] = matrix[row][col + 1];
                    cubeMatrix[1][0] = matrix[row + 1][col];
                    cubeMatrix[1][1] = matrix[row+ 1][col + 1];
                }
            }
        }
        for(int row = 0; row < 2; row++)
        {
            for(int col = 0; col < 2; col++)
            {
                System.out.print(cubeMatrix[row][col] + " ");
            }
            System.out.println();
        }
        System.out.println(maxSum);
    }
}
